// embend file

void bendPropagate(UAL::Probe& probe, double lngth, double klE0, double klE1, double klM0, double klM1)                                    // Bend method
{
std::cerr << "\nJDT2018 - enter File " << __FILE__ << " line " << __LINE__ << "\n";
m_l=lngth;
 tofD               = m_l/vD;
 thetaD             = klE0;
std::cerr << "thetaD    " << thetaD  << "\n";

double eAngle = thetaD;
double mAngle = klM0;   //0;//data[1];                         //   !!!   <<<<----
double tAngle = mAngle+eAngle;                   //   !!!   <<<<----
double etaM = mAngle/(mAngle+eAngle);
double etaE = eAngle/(mAngle+eAngle);

// Rsxf               = m_data.m_l/tAngle;                     // sxf file determines radius
 rD                 = Rsxf;                                          // design radius is new, in principle
double rM           = Rsxf;

std::cerr << "++++++++++++++++++++++++++++++++\n";
std::cerr << "electric angle is    " << eAngle  << " (data[1] !!!)    for bend " << bnd << " of " << ualPSs << " total sxf propagators\n";
std::cerr << "magnetic angle is    " << mAngle  << " (m_data.m_angle) for bend " << bnd << " of " << ualPSs << " total sxf propagators\n";
std::cerr << "tAngle               " << tAngle  << "\n";
std::cerr << "eta Electric   is    " << etaE  << "\n";
std::cerr << "eta Magnetic   is    " << etaM  << "\n";
std::cerr << "etaE + etaM    is    " << etaE+etaM  << "\n";
std::cerr << "++++++++++++++++++++++++++++++++\n";

 updateDesignParameters();                                           // pDc, gammaD, ... might change
                                                                     // they don't here. rD on command line?
 PAC::Bunch& bunch  = static_cast<PAC::Bunch&>(probe);

//int totalSplitBends= 2*pow( 2, m_data.m_ir );
//int totalSplitBends= 2*pow( 2, 0 );
  int totalSplitBends= 2;

// int splitBndsPerTrn= bndsPerTrn*totalSplitBends;
//std::cerr << "totalSplitBends " << totalSplitBends << " splitBndsPerTrn " << splitBndsPerTrn << "\n";

//double m           = m_data.m_m;
  double m           = 0;

  double theta       = 2.*eAngle/totalSplitBends;
//double theta       = 2.*m_data.m_angle/totalSplitBends;

 double invFclLngtX = (m-1.)*theta/rD;
 th=theta/2.;                                                        // angle for exact beam advance
 for(int ip = 1; ip < bunch.size(); ip++) {   // BUNCH LOOP
  PAC::Position& p  = bunch[ip].getPosition();
  pacPmy            = &p;

double pcxIn=pacPmy->getPX()*pDc;
double pcyIn=pacPmy->getPY()*pDc;
double pcPerpIn=pcyIn;

std::cerr << "++++++++++++++++++++++++++++++++\n";
std::cerr << "Rsxf (radius from sxf) is  " << Rsxf    << "\n";
std::cerr << "pDc                  is    " << pDc     << "\n";
std::cerr << "pacPmy->getX()       is    " << pacPmy->getX()  << "\n";
std::cerr << "pacPmy->getPX()      is    " << pcxIn << "\n";
std::cerr << "pacPmy->getY()       is    " << pacPmy->getY()  << "\n";
std::cerr << "pacPmy->getPY()      is    " << pcyIn << "\n";
std::cerr << "pacPmy->getCT()      is    " << pacPmy->getCT() << "\n";
std::cerr << "pacPmy->getDE()      is    " << pacPmy->getDE() << "\n\n";
std::cerr << std::setprecision(20);

double eIn=eD+pDc*pacPmy->getDE();

//double pcIn=sqrt(eD*eD-mDcc*mDcc);
//double pcInSqu=(eD+mDcc)*(eD-mDcc);
  double pcInSqu=(eIn+mDcc)*(eIn-mDcc);
  double pcIn   =sqrt(pcInSqu);

  double pcPllInSqu=(pcIn+pcPerpIn)*(pcIn-pcPerpIn);
  double pcPllIn   =sqrt(pcPllInSqu);

  double onePlusDelta=pcPllIn/pDc;
  double        delta=1.-onePlusDelta;

  double pczInSqu=(pcPllIn+pcxIn)*(pcPllIn-pcxIn);
  double pczIn   =sqrt(pczInSqu);

Vector3 r_In(Rsxf+pacPmy->getX(),pacPmy->getY(),0);
Vector3 pc_In(pDc*pacPmy->getPX(), pDc*pacPmy->getPY(), pczIn);
Vector3 l_In=r_In.cross(pc_In);

std::cerr << "scalar eIn           is    " << eIn    << "\n";
std::cerr << "scalar pcIn          is    " << pcIn   << "\n";
std::cerr << "scalar pcPllIn       is    " << pcPllIn << "\n";
std::cerr << "scalar pcPerpIn      is    " << pcPerpIn << "\n";
std::cerr << "(scalar pcyIn)       is    " << pcyIn << "\n";
std::cerr << "scalar onePlusDelta  is    " << onePlusDelta << "\n";
std::cerr << "scalar delta         is    " << delta << "\n";
std::cerr << "scalar pczIn         is    " << pczIn   << "\n\n";

std::cerr << "vector r_In          is    " << r_In   << "\n";
std::cerr << "vector pc_In         is    " << pc_In   << "\n";
std::cerr << "vector l_In          is    " << l_In   << "\n\n";
std::cerr << "++++++++++++++++++++++++++++++++\n";

//Vector3 v=get_vlcyMKS.method(pacPmy,1.0048);
/*
  double e0    = ba.getEnergy();
  double m0    = ba.getMass();
  double GG    = ba.getG();

  double p0    = sqrt(e0*e0 - m0*m0);
  double v0byc = p0/e0;
  double gamma = e0/m0;
std::cerr << "vector r_In = (Rsxf+pacPmy->getX(), 0, 0) is " << "( " << Rsxf      << " , 0 , 0 )\n";
std::cerr << "vector pc_In = p0(pacPmy->getPX() , pacPmy->getPY() , ???) is " << "( " << p0*pacPmy->getPX()      << " , p0*pacPmy->getPY() , ??? )\n";
std::cerr << "++++++++++++++++++++++++++++++++\n";

  // position

  PAC::Position& pos = prt.getPosition();

  double x   = pos.getX();
  double px  = pos.getPX();
  double y   = pos.getY();
  double py  = pos.getPY();
  // double ct  = pos.getCT();
  double de  = pos.getDE();

  double pz = get_psp0(pos, v0byc);

  double e = de*p0 + e0; 
  double p = sqrt(e*e - m0*m0);
*/

  entryFF(ip);                                                       // "pure FF" (stub)
  refractIn(ip);                                                     // refract, alternate Lxc, Lyc, Lzc, Lc, no gamma kick
  updateMunoz();                                                     // Lxc, Lyc, Lzc, Lc, Q, kappa, ...
  for(int i = 0; i < totalSplitBends/2; i++){       // SPLIT LOOP
   update_xi();                                                      // xi0, xip0, xi_co
   traverseSplitBendExactly(ip);                                     // pure Munoz, uses rD, th
   split_bnd++;
   perSplitBendOutput(ip);
   initSpin(ip);
   updateMunoz();                                                    // Lxc, Lyc, Lzc, Lc, Q, kappa, ...
   updateSpin(ip);                                                   // sTldIn, delGam, ... xi disabled

   p[1]            +=  p[0]*invFclLngtX;                             // uses real m to correct for m=1
   p[3]            -=  p[2]*invFclLngtX;                             // uses real m to correct for m=1

   updateMunoz();                                                    // Lxc, Lyc, Lzc, Lc, Q, kappa, ...
   update_xi();
   traverseSplitBendExactly(ip);                                     // pure Munoz, uses rD, th
   split_bnd++;
   perSplitBendOutput(ip);

   initSpin(ip);
   updateMunoz();                                                    // Lxc, Lyc, Lzc, Lc, Q, kappa, ...
   updateSpin(ip);
  }                                                 // SPLIT LOOP - END
  refractOut(ip);                                                    // (stub)
  exitFF(ip);                                                        // (stub)
/*
  if( (bnd%splitBndsPerTrn) == 0 ){
   NikolayOut.open ("NikolayOut", fstream::out | fstream::app);
   NikolayOut << setw(3) << ip << " " << setw(3) << bnd/splitBndsPerTrn << " " << setw(17) << 0 << " " << setw(17) << p[0] <<     " " << setw(17) << p[1] << " " << setw(17) << p[2] << " " << setw(17) << p[3] << " " << setw(17) << p[4] << " " << setw(17) << p[5] << " " << setw(17) << __SPIN__[ip][0] << " " << setw(17) << __SPIN__[ip][1] << "     " << setw(17) << __SPIN__[ip][2] << "\n";
   NikolayOut.close (); 
  }
*/
 }                                            // BUNCH LOOP - END
 bnd++;
 bendsDT           += 1;
 tofDT             += tofD;
 thetaDT           += eAngle + mAngle;        // thetaD;
 sDT               += m_l;
std::cerr << "\nJDT2018 - leave File " << __FILE__ << " line " << __LINE__ << "\n";
}
