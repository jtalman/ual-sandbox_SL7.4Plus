// quad file
quad()
  : ETEAPOT::BasicTracker()
{
//initialize();
  m_ir = 0.0;
}

quad(const EMTEAPOT::quad& mt) 
  : ETEAPOT::BasicTracker(mt)
{
  copy(mt);
}

~quad()
{
}

UAL::PropagatorNode* clone()
{
  return new EMTEAPOT::quad(*this);
}

void setLatticeElements(const UAL::AcceleratorNode& sequence, 
                                            int is0, 
                                            int is1,
                                            const UAL::AttributeSet& attSet)
{
std::cerr << "\nJDT2018 - File " << __FILE__ << " line " << __LINE__ << " enter method setLatticeElements(UAL)\n";
   ETEAPOT::BasicTracker::setLatticeElements(sequence, is0, is1, attSet);
   const PacLattice& lattice     = (PacLattice&) sequence;
   setLatticeElement(lattice[is0]);

   PacLattElement ple = *((PacLattElement*) sequence.getNodeAt(is0));
   std::string pleDN = ple.getDesignName();
// if(pleDN=="QFh"){for_postSxfPropagate << "/* lattice index " << is0 << " " << pleDN << " " << numQFh << " at " << ple.getPosition() << " */";}
// if(pleDN=="QD"){ for_postSxfPropagate << "/* lattice index " << is0 << " " << pleDN << " " << numQD  << " at " << ple.getPosition() << " */";}
// for_postSxfPropagate << "/* type " << ple.getType() << " name " << ple.getName() << " design name " << ple.getDesignName() << " length " << ple.getLength() << " n " << ple.getN() << " angle " << ple.getAngle() << " position " << ple.getPosition() << " */";
// for_postSxfPropagate << "em_q.propagate(bunch);\n";
   if(pleDN=="QFh"){numQFh++;}
   if(pleDN=="QD"){ numQD++;}

std::cerr << "\nJDT2018 - File " << __FILE__ << " line " << __LINE__ << " leave method setLatticeElements(UAL)\n";
}

void setLatticeElement(const PacLattElement& e)
{
std::cerr << "\nJDT2018 - File " << __FILE__ << " line " << __LINE__ << " enter method setLatticeElements(PAC)\n";
PacElemMultipole* m_mlt;
PacElemRotation* m_rotation;
PacElemAttributes* attributes = e.getBody();
if(attributes){
    for(PacElemAttributes::iterator it = attributes->begin(); it != attributes->end(); it++){
      switch((*it).key()){
      case PAC_MULTIPOLE:
	m_mlt = (PacElemMultipole*) &(*it);
	break;
      case PAC_OFFSET:
	m_offset = (PacElemOffset*) &(*it);
	break;
      case PAC_APERTURE:
	// m_aperture = (PacElemAperture*) &(*it);
	break;
      case PAC_ROTATION:
	m_rotation = (PacElemRotation*) &(*it);
	break;
      default:
	break;
      }
    }
}
  // length
  // m_l = e.getLength();

  // ir
  m_ir = e.getN();

if(!m_ir){
 std::cerr << "JDT2018 - enter quad::void setLatticeElement(PAC)" << "\n";
}
else{
 std::cerr << "Complex Elements not allowed!!!\n";
 exit(1);
}

  m_mdata.setLatticeElement(e);

std::cerr << "\nJDT2018 - File " << __FILE__ << " line " << __LINE__ << " leave method setLatticeElements(PAC)\n";
}

void copy(const EMTEAPOT::quad& mt) 
{
  // m_l   = mt.m_l;
  m_ir  = mt.m_ir;

  m_mdata = mt.m_mdata;
}

const char*  getType()
{
 return "EMTEAPOT::quad";
}
